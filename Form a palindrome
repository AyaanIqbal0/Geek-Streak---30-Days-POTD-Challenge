class Solution{
    static int countMin(String str)
    {
        int n =str.length();
        StringBuilder sb = new StringBuilder(str);
        sb.reverse();
     int lcs = longestCommonSubsequence(str,sb.toString());
     
     return (n -lcs);
    }
     private static int longestCommonSubsequence(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
       
        // Create arrays to store the LCS lengths
        int prev[] = new int[m + 1];
        int curr[] = new int[m + 1];

       
        for (int i = 0; i <=m; i++) {
            prev[i] = 0;
        }

        for (int ind1 = 1; ind1 <= n; ind1++) {
            for (int ind2 = 1; ind2 <= m; ind2++) {
                if (s1.charAt(ind1 - 1) == s2.charAt(ind2 - 1)) {
                  curr[ind2] = 1 + prev[ind2 - 1];
                } else {
                    curr[ind2] = Math.max(prev[ind2], curr[ind2 - 1]);
                }
            }
             prev = (int[]) (curr.clone());
        }

        return prev[m];
    }
}
