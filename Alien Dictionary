class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
           ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
           for(int i=0;i<K;i++){
               adj.add(new ArrayList<>());
           }
           for(int i=0;i<N-1;i++){
               String s1=dict[i];
               String s2 = dict[i+1];
               int len=Math.min(s1.length(),s2.length());
               for(int j=0;j<len;j++){
                   if(s1.charAt(j)!=s2.charAt(j)){
                       adj.get(s1.charAt(j)-'a').add(s2.charAt(j)-'a');
                       break;
                   }
               }
           }
         List<Integer> topo = topoSort(K, adj);
        String ans = "";
        for (int it : topo) {
            ans = ans + (char)(it + (int)('a'));
        }

        return ans;
    }
    static List<Integer> topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        int vis[] = new int[V];
        Stack<Integer> st = new Stack<Integer>();
        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                dfs(i, vis, st, adj);
            }
        }

        List<Integer> ans = new ArrayList<>();
        int i = 0;
        while (!st.isEmpty()) {
            ans.add(st.pop());
        }
        return ans;
    }
     private static void dfs(int node, int vis[], Stack<Integer> st,
            ArrayList<ArrayList<Integer>> adj) {
        vis[node] = 1;
        for (int it : adj.get(node)) {
            if (vis[it] == 0)
                dfs(it, vis, st, adj);
        }
        st.push(node);
    }
}
