class Solution
{
    /*class Node {
    	int data;
    	Node left;
    	Node right;
    
    	Node(int data) {
    		this.data = data;
    		left = null;
    		right = null;
    	}
    }*/
    
    public static int minTime(Node root, int target) 
    {
       HashMap<Node, Node> parentMap = new HashMap<>();
        storeParentPointers(root, null, parentMap);
    
        return bfsToBurnTree(root, target, parentMap);
    }
     private static void storeParentPointers(Node node, Node parent, HashMap<Node, Node> parentMap) {
        if (node == null) return;
        parentMap.put(node, parent);
        storeParentPointers(node.left, node, parentMap);
        storeParentPointers(node.right, node, parentMap);
    }
     private static int bfsToBurnTree(Node root, int target, HashMap<Node, Node> parentMap) {
        Queue<Node> queue = new LinkedList<>();
        Set<Node> visited = new HashSet<>();
        Node targetNode = findTarget(root, target);
        
        queue.add(targetNode);
        visited.add(targetNode);
        int timeToBurn = 0;
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean isBurning = false;
            
            for (int i = 0; i < size; i++) {
                Node current = queue.poll();
                
                if (current.left != null && !visited.contains(current.left)) {
                    queue.add(current.left);
                    visited.add(current.left);
                    isBurning = true;
                }
                
                if (current.right != null && !visited.contains(current.right)) {
                    queue.add(current.right);
                    visited.add(current.right);
                    isBurning = true;
                }
                

                Node parent = parentMap.get(current);
                if (parent != null && !visited.contains(parent)) {
                    queue.add(parent);
                    visited.add(parent);
                    isBurning = true;
                }
            }
            
            if (isBurning) {
                timeToBurn++;
            }
        }
        
        return timeToBurn;
    }
     static Node findTarget(Node root , int target)
    {
        if (root == null || root.data == target) {
            return root;
        }
        
        Node left = findTarget(root.left, target);
        if (left != null) {
            return left;
        }
        return findTarget(root.right, target);
    }
}
